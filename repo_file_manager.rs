// —ç—Ç–∞ —Ç–µ–º–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

// –º–µ—Ç–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è ______>
// - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
// - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
// - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
// - ‚Äú–ó–∞–≥—Ä—É–∑–∏—Ç—å‚Äù —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–º–º–∏—Ç–∞

use crate::vcs_state_manager;
use crate::initcom;
use chrono;

use std::fs::File;
use walkdir::{DirEntry, WalkDir};
use std::path::PathBuf;
use std::env;
use sha1::{Sha1, Digest};
use std::io::Read;
use std::fs;

// –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–¥–æ–±–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—Ä–µ–π—Ç–æ–º walkdir - –≤–æ—Ç —ç—Ç–∞ —Ç–µ–º–∫–∞ –Ω—É–∂–Ω–∞ –Ω–∞–º —Ç—É–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∏—Ç–∞)))

// pub fn get_list_of_files_from_repo() {
//     unimplemented!()
// }

// pub fn get_changing_files_and_new_from_comit() {
//     unimplemented!() // —è —ç—Ç–æ –≤—Ä—É—á–Ω—É—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –≤ —Å—Ç—É—Ç—É—Å–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—é–¥–∞
// }

pub fn make_file_commit_with_repo_files(message: &String) {
    // –¥–æ—Å—Ç–∞—Ç—å current commit –∏–∑ state
    // —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –¥–∂–µ–π—Å–æ–Ω –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤ title —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –≤ prev_commit = —Å—Å—ã–ª–∫—É –Ω–∞ —Åurrent commit (–µ–≥–æ —Ö—ç—à)
    // –≤ files —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–µ –∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–º–∏—á–µ–Ω—ã

    // –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ö—ç—à(–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    // –∑–∞—Å–Ω—É—Ç—å —Ö—ç—à —ç—Ç–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –≤ –ª–∏—Å—Ç –∫–æ–º–º–∏—Ç–æ–≤, –ø–æ–º–µ–Ω—è—Ç—å current commit, –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏—Ä—Ä–µ–∫—Ç–æ—Ä–∏—é commit

    // let cur_cur_commit = vcs_state_manager::get_current_commit();


    // –ò –≤—Å–µ, —á—Ç–æ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–π—Ç serde::Serialize, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É/–≤ –≤–µ–∫—Ç–æ—Ä –±–∞–π—Ç:

    // –°–ù–ê–ß–ê–õ–ê –Ø –°–§–û–†–ú–ò–†–£–Æ –ù–û–í–´–ô –ö–û–ú–ò–¢ –ò –î–û–ë–ê–í–õ–Æ –ï–ì–û –í–û –í–°–ï –î–ñ–ï–ö–°–û–ù–´ –¢–û–õ–¨–ö–û –ü–û–¢–û–ú –í –î–ò–† –ö–û–ú–ú–ò–¢–°

    let mut answer_of_need_path: PathBuf = PathBuf::default();
    let path_to_cut_cut_dir = env::current_dir().unwrap();
    let mut flag_on_underfolter_is_vcs = false;
    let new_try_path_all = path_to_cut_cut_dir.clone();
    new_try_path_all.join(".vcs");
    if new_try_path_all.is_dir() {
        flag_on_underfolter_is_vcs = true;
        answer_of_need_path = path_to_cut_cut_dir.clone();
    }
    while !flag_on_underfolter_is_vcs {
        let new_try_path = path_to_cut_cut_dir.parent().unwrap().to_path_buf();
        let new_tr_path_with_vcs = new_try_path.clone();
        new_tr_path_with_vcs.join(".vcs");
        if new_tr_path_with_vcs.is_dir() {
            flag_on_underfolter_is_vcs = true;
            answer_of_need_path = new_try_path.clone();
        }
    }
    
    // ----------------------------------------------------

    let mut vec_of_not_commited_files: Vec<(String, [u8; 20])> = Vec::new();

    fn is_hidden(entry: &DirEntry) -> bool {
        entry.file_name()
             .to_str()
             .map(|s| s.starts_with(".vcs"))
             .unwrap_or(false)
    }
    
    let walker = WalkDir::new(answer_of_need_path.clone()).into_iter();
    for entry in walker.filter_entry(|e| !is_hidden(e)) {
        let path_to_each_file_of_repo = entry.unwrap().path().display().to_string();
        
        let mut file = File::open(path_to_each_file_of_repo.clone()).unwrap();
        let mut content: Vec<u8> = Vec::new();
        file.read_to_end(&mut content).unwrap();

        let mut hasher_for_each_file = Sha1::new();
        hasher_for_each_file.update(content);
        let result: [u8; 20] = hasher_for_each_file.finalize().to_vec().try_into().unwrap();
        
        vec_of_not_commited_files.push((path_to_each_file_of_repo, result));
    }
    // –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º —è –≤—Å–ø–ª—ã–ª –¥–æ —Ä–µ–ø–æ–∑–∏—Ç–∞, –ø—Ä–æ—à–µ–ª—Å—è –ø–æ –≤—Å–µ–º –µ–≥–æ —Ñ–∞–π–ª–∞–º –≤–∑—è–ª –æ—Ç –Ω–∏—Ö —Ö—ç—à –∏ –∑–∞–ø–∏—Å–∞–ª –≤ –≤–µ–∫—Ç–æ—Ä, —á—Ç–æ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–ª–µ–º –º–æ–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ 

    let again_current_branch = vcs_state_manager::get_current_branch();
    let again_current_commit = vcs_state_manager::get_current_commit(); // –≤–æ—Ç —ç—Ç—É —à—Ç—É–∫—É –µ—â–µ –Ω–∞–¥–æ –≤–Ω–∏–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å —ç—Ç–∏–º —É–∂–µ —Å—Ç–∞—Ä—ã–º –∫–æ–º–º–º–∏—Ç–æ–º

    let object_for_write_comit: initcom::Commit = initcom::Commit { title: (String::from(message.clone())), prev_commit: (again_current_commit.clone()), files: (vec_of_not_commited_files.clone()), branch_where_commit: (again_current_branch.clone()), time_when_was_build: (chrono::Local::now())};
    
    let str_of_elemnts_for_commit = serde_json::to_string(&object_for_write_comit).unwrap();

    let mut hasher_for_commit = Sha1::new();

    hasher_for_commit.update(&str_of_elemnts_for_commit);

    let hash = format!("{:x}", hasher_for_commit.clone().finalize());

    let hash_with_json = hash.clone() + ".json";

    let path_of_dir_to_vcs = answer_of_need_path.join(".vcs");
    let mut new_path_commit = path_of_dir_to_vcs.clone();
    new_path_commit = PathBuf::from(&new_path_commit).join(&hash_with_json); // –ø—Ä–æ—Å—Ç–æ –≤ vcs —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç –¥–∂–µ–∫—Å–æ–Ω
    std::fs::write(new_path_commit, str_of_elemnts_for_commit).unwrap();

    let mut path_of_dir_to_vcs_commits_to_cimmit = path_of_dir_to_vcs.clone();
    path_of_dir_to_vcs_commits_to_cimmit = path_of_dir_to_vcs_commits_to_cimmit.join("commits").join(hash);
    fs::create_dir(path_of_dir_to_vcs_commits_to_cimmit.clone()).unwrap();

    // –¥–æ–±–∞–≤—å –±–ª–∏–Ω –≤—Å–µ –≤ –¥–∂–µ–∫—Å–æ–Ω—ã 

    // —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª—é –≤ –ª–∏—Å—Ç –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ = —Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ –ª–∏—Å—Ç –∫–æ–º–º–∏—Ç + –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞–Ω–æ–≤—ã–π –∫–æ–º–º–∏—Ç  + –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª
    let mut path_to_list_commit = path_of_dir_to_vcs.clone();
    path_to_list_commit = path_to_list_commit.join("commit_list.json");
    let file_with_commits = File::open(path_to_list_commit.clone()).unwrap();

    let json: serde_json::Value = serde_json::from_reader(file_with_commits).unwrap();

    let string = serde_json::to_string(&json).unwrap();

    let mut object_for_commit_json: initcom::CommitList = serde_json::from_str(&string).unwrap();
    
    object_for_commit_json.commit_name.push(hash_with_json.clone());

    let str_of_elements_commit_list = serde_json::to_string(&object_for_commit_json).unwrap();

    std::fs::write(path_to_list_commit, str_of_elements_commit_list).unwrap();


    // —Å–µ–π—á–∞—Å —è –æ–±–Ω–æ–≤–ª—é —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç –≤ —Å—Ç–µ–π—Ç–µ = —Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–º–º–∏—Ç –∏ –±—Ä–µ–Ω—á (-) + —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å—Ç–µ–π—Ç–∞ + –∑–∞–ø–∏—Å–∞—Ç—å —Ç—É–¥–∞ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    let _curre_commit = vcs_state_manager::get_current_commit();
    let curre_branch = vcs_state_manager::get_current_branch();

    // –±—Ä–µ–Ω—á –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ, –∞ –∫–æ–º–º–∏—Ç –ø–æ–º–µ–Ω—è–ª–∏ –Ω–∞ —Ç–æ, —á—Ç–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
    let object_for_state_json: initcom::State = initcom::State { current_comit_hash: (hash_with_json), current_branch_name: (curre_branch) };

    let str_of_elements_for_state_ = serde_json::to_string(&object_for_state_json).unwrap();

    let mut path_to_state_ = path_of_dir_to_vcs.clone();
    path_to_state_ = path_to_state_.join("state.json");

    std::fs::write(path_to_state_, str_of_elements_for_state_).unwrap();

    // ----------------------------------------------------
    
    let walker = WalkDir::new(answer_of_need_path.clone()).into_iter();
    for entry in walker.filter_entry(|e| !is_hidden(e)) {
        let path_to_each_file_of_repo = entry.unwrap().path().display().to_string();
        let path_to_file = path_to_each_file_of_repo.clone();
        let real_path_to_each_file_of_repo: PathBuf = PathBuf::from(path_to_file);
       
        // –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ —è —Å–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ñ–∞–π–ª -----------
        let dir_path = real_path_to_each_file_of_repo.parent().unwrap();
        if dir_path != answer_of_need_path {
            let create_dir_in_commits = path_of_dir_to_vcs_commits_to_cimmit.join(dir_path);
            fs::create_dir(create_dir_in_commits.clone()).unwrap();

            let create_current_file_in_dir = create_dir_in_commits.join(path_to_each_file_of_repo.clone()); // –ø–æ–ø—Ä–æ–±—É—é –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ path_to_each_file_of_repo 
            fs::copy(real_path_to_each_file_of_repo.clone(), create_current_file_in_dir.clone()).unwrap();
        }
        
        let create_just_file = path_of_dir_to_vcs_commits_to_cimmit.join(path_to_each_file_of_repo.clone());
        fs::copy(real_path_to_each_file_of_repo.clone(), create_just_file.clone()).unwrap();
        // --------------------------------------------------------------------------
    }
    // –∑–¥–µ—Å—å —è –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ, —Ö–æ—Ç—è –º–æ–≥ —á–∞—Å—Ç—å –¥–µ–ª–∏–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∫—Å üòµ‚Äçüí´üòµ‚Äçüí´üòµ‚Äçüí´

    // –ó–î–ï–°–¨ –ú–ù–ï –ù–£–ñ–ù–û –í–´–ü–û–õ–ù–ò–¢–¨ –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –°–¢–ê–¢–£–°–ê, –¢–ê–ö –ö–ê–ö –ù–£–ñ–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–• (–ò –í–´–ù–ï–°–ò –ù–ê–ö–û–ù–ï–¶ –ü–û–î–™–ï–ú –î–û –î–ò–†–ï–ö–¢–û–†–ò–ò –í –§–£–ù–ö–¶–ò–Æ)
    
    // –ù–û –Ø –£–ñ–ï –ù–ê–®–ï–õ –†–ï–ü–û –î–ò–†–ï–ö–¢–û–†–ò–Æ –ò –ó–ê–ü–û–õ–ù–ò–õ –í–ï–ö–¢–û–† –°–û –°–í–ï–ñ–ò–ú–ò –§–ê–ô–õ–ê–ú–ò :)

    let mut modifited_path: Vec<String> = vec![];
    let mut added_path: Vec<String> = vec![];

    let file_with_state = File::open(again_current_commit.clone()).unwrap();
    let commit_json: serde_json::Value = serde_json::from_reader(file_with_state).unwrap();

    let string = serde_json::to_string(&commit_json).unwrap();

    // –∑–¥–µ—Å—å –ª–µ–∂–∏—Ç –∑–∞–∫–æ–º–∏—á–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–π—Ñ–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    let object_for_vec_from_commit: initcom::Commit = serde_json::from_str(&string).unwrap();

    for i in 0..object_for_vec_from_commit.files.len() {
        for j in 0..vec_of_not_commited_files.len() {
            if object_for_vec_from_commit.files[i].0 == vec_of_not_commited_files[j].0 { // –ø—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∑–¥–µ—Å—å –æ–±–∞ –ø—É—Ç–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–±—Ç—Å—è –ª–∏–±–æ –±–µ–∑ / –≤ –∫–æ–Ω—Ü–µ –∏–ª–∏ –æ–±–∞ —Å –Ω–∏–º
                for k in 0..20 {
                    if object_for_vec_from_commit.files[i].1[k] != vec_of_not_commited_files[j].1[k] {
                        // –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–æ–¥–∏—Ñ–∞–π–¥
                        modifited_path.push(object_for_vec_from_commit.files[i].0.clone());
                        break;
                    }
                }
            }
        }
    }

    for i in 0..vec_of_not_commited_files.len() {
        let mut counter_for_add = 0;
        for j in 0..object_for_vec_from_commit.files.len() {
            if object_for_vec_from_commit.files[j].0 == vec_of_not_commited_files[i].0 {
                counter_for_add += 1;
                break;
            }
        }

        if counter_for_add == 0 {
            // –∑–Ω–∞—á–∏—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å 
            added_path.push(vec_of_not_commited_files[i].0.clone()) // –ø—Ä–æ–≤–µ—Ä–∏—Ç—Ç—å —á—Ç–æ –ø—É—à–∞–µ–º –∏–º–µ–Ω–Ω–æ —Å–æ —Å–ª–µ—à–æ–º –∏–ª–∏ –±–µ–∑ —Ç–æ–∂–µ /
        }
    }

    // –ü–†–ò–•–û–î–ò–¢–°–Ø –î–ï–õ–ê–¢–¨ –¢–£–¢ –ö–û–ú–ú–ï–ù–¢
    // –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if modifited_path.len() == 0 && added_path.len() == 0 {
        println!("No changes to be committed");
        return;
    }

    // –µ—Å–∏–¥ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    println!("[{}  {}] Work in progress", again_current_branch, again_current_commit);
    println!("{} files changed, {} added", modifited_path.len(), added_path.len());
    for i in modifited_path {
        println!("    modified: {}", i);
    }
    for i in added_path {
        println!("    added: {}", i)
    }
}



// pub fn downl_state_of_files_from_commit() {

// }

